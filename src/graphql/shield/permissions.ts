import { AuthenticationError } from 'apollo-server-core';
import { shield } from 'graphql-shield';
import { message } from '../../components/error';
import * as rules from './rules';

export const permissions = shield(
  {
    Query: {
      // category: rules.isAllowed('CATEGORY_READ'),
      // categories: rules.isAllowed('CATEGORY_READ'),
      // coreSystem: rules.isAllowed('CORE_SYSTEM_READ'),
      // coreSystems: rules.isAllowed('CORE_SYSTEM_READ'),
      // coreSystemParameter: rules.isAllowed('CORE_SYSTEM_READ'),
      // coreSystemParameters: rules.isAllowed('CORE_SYSTEM_READ'),
      // currentUser: rules.isAuthenticated,
      // equipmentStatus: rules.isAllowed('EQUIPMENT_STATUS_READ'),
      // equipmentStatuses: rules.isAllowed('EQUIPMENT_STATUS_READ'),
      // group: rules.isAllowed('GROUP_READ'),
      // groups: rules.isAllowed('GROUP_READ'),
      // measurementUnit: rules.isAllowed('MEASUREMENT_UNIT_READ'),
      // measurementUnits: rules.isAllowed('MEASUREMENT_UNIT_READ'),
      // permission: rules.isAllowed('PERMISSION_READ'),
      // permissions: rules.isAllowed('PERMISSION_READ'),
      // plan: rules.isAllowed('PLAN_READ'),
      // plans: rules.isAllowed('PLAN_READ'),
      // role: rules.isAllowed('ROLE_READ'),
      // roles: rules.isAllowed('ROLE_READ'),
      // shift: rules.isAllowed('SHIFT_READ'),
      // shifts: rules.isAllowed('SHIFT_READ'),
      // unit: rules.isAllowed('UNIT_READ'),
      // units: rules.isAllowed('UNIT_READ'),
      // user: rules.isAllowed('USER_READ'),
      // users: rules.isAllowed('USER_READ'),
    },
    Mutation: {
      // activatePlan: rules.isAllowed('PLAN_UPDATE'),
      // activateRole: rules.isAllowed('ROLE_UPDATE'),
      // activateUser: rules.isAllowed('USER_UPDATE'),
      // addOperationUsersToGroup: rules.isAllowed('GROUP_UPDATE'),
      // addPermissionToRole: rules.isAllowed('ROLE_UPDATE'),
      // addRoleToUser: rules.isAllowed('USER_UPDATE'),
      // createCategory: rules.isAllowed('CATEGORY_CREATE'),
      // createCoreSystem: rules.isAllowed('CORE_SYSTEM_CREATE'),
      // createCoreSystemParameter: rules.isAllowed('CORE_SYSTEM_UPDATE'),
      // createEquipmentStatus: rules.isAllowed('EQUIPMENT_STATUS_CREATE'),
      // createGroup: rules.isAllowed('GROUP_CREATE'),
      // createMeasurementUnit: rules.isAllowed('MEASUREMENT_UNIT_CREATE'),
      // createPermission: rules.isAllowed('PERMISSION_CREATE'),
      // createPlan: rules.isAllowed('PLAN_CREATE'),
      // createRole: rules.isAllowed('ROLE_CREATE'),
      // createShift: rules.isAllowed('SHIFT_CREATE'),
      // createUser: rules.isAllowed('USER_CREATE'),
      // deactivateRole: rules.isAllowed('ROLE_UPDATE'),
      // deactivateUser: rules.isAllowed('USER_UPDATE'),
      // deleteCategory: rules.isAllowed('CATEGORY_DELETE'),
      // deleteCoreSystem: rules.isAllowed('CORE_SYSTEM_DELETE'),
      // deleteCoreSystemParameter: rules.isAllowed('CORE_SYSTEM_UPDATE'),
      // deleteEquipmentStatus: rules.isAllowed('EQUIPMENT_STATUS_DELETE'),
      // deleteGroup: rules.isAllowed('GROUP_DELETE'),
      // deleteMeasurementUnit: rules.isAllowed('MEASUREMENT_UNIT_DELETE'),
      // deletePermission: rules.isAllowed('PERMISSION_DELETE'),
      // deletePlan: rules.isAllowed('PLAN_DELETE'),
      // deleteRole: rules.isAllowed('ROLE_DELETE'),
      // deleteShift: rules.isAllowed('SHIFT_DELETE'),
      // deleteUser: rules.isAllowed('USER_DELETE'),
      // resetUserPassword: rules.isAllowed('USER_UPDATE'),
      // updateCategory: rules.isAllowed('CATEGORY_UPDATE'),
      // updateCoreSystem: rules.isAllowed('CORE_SYSTEM_UPDATE'),
      // updateCoreSystemParameter: rules.isAllowed('CORE_SYSTEM_UPDATE'),
      // updateCurrentUser: rules.isAuthenticated,
      // updateEquipmentStatus: rules.isAllowed('EQUIPMENT_STATUS_UPDATE'),
      // updateGroup: rules.isAllowed('GROUP_UPDATE'),
      // updateMeasurementUnit: rules.isAllowed('MEASUREMENT_UNIT_UPDATE'),
      // updatePermission: rules.isAllowed('PERMISSION_UPDATE'),
      // updatePlanSupervisor: rules.isAllowed('PLAN_UPDATE'),
      // updatePlanUsers: rules.isAllowed('PLAN_UPDATE'),
      // updateRole: rules.isAllowed('ROLE_UPDATE'),
      // updateShift: rules.isAllowed('SHIFT_UPDATE'),
      // updateUser: rules.isAllowed('USER_UPDATE'),
      // updateCurrentUserPassword: rules.isAuthenticated,
      // upload: rules.isAllowed('USER_READ'),
    },
  },
  {
    fallbackError: new AuthenticationError(message.auth.NOT_AUTHENTICATED),
  },
);
